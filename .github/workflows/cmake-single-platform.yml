name: CMake on a single platform

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # ソースコードのチェックアウト
    - uses: actions/checkout@v4

    # apt パッケージキャッシュの復元
    - name: Cache apt packages
      uses: actions/cache@v4
      with:
        path: /var/cache/apt
        key: ${{ runner.os }}-apt-${{ hashFiles('**/dependencies.txt') }}
        restore-keys: |
          ${{ runner.os }}-apt

    # 必要な依存関係のインストール
    - name: Install dependencies
      run: |
        sudo mkdir /root/skia
        sudo chmod -R 777 /root/skia
        sudo rm -rf /root/skia
        sudo apt-get update
        sudo apt-get install -y build-essential cmake git libssl-dev zlib1g-dev libopus-dev python3 python3-pip
        python3 -m pip install -U pip
        sudo python3 -m pip install gn ninja

    # Python パッケージキャッシュの復元
    - name: Cache Python packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip

    # DPPのキャッシュ
    - name: Cache DPP
      uses: actions/cache@v4
      with:
        path: ./DPP/build
        key: ${{ runner.os }}-DPP-${{ hashFiles('**/DPP/CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-DPP

    # DPPのビルドとインストール
    - name: Build and Install DPP
      run: |
        git clone https://github.com/brainboxdotcc/DPP.git
        cd DPP
        sudo cmake -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        sudo cmake --build build --target install -j8
        cd ..

    # libhvのキャッシュ
    - name: Cache libhv
      uses: actions/cache@v4
      with:
        path: ./libhv/build
        key: ${{ runner.os }}-libhv-${{ hashFiles('**/libhv/CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-libhv

    # libhvのビルドとインストール
    - name: Build and Install libhv
      run: |
        git clone https://github.com/ithewei/libhv.git
        cd libhv
        sudo cmake -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_SSL=ON
        sudo cmake --build build --target install -j8
        cd ..

    # nlohmann::jsonのキャッシュ
    - name: Cache nlohmann::json
      uses: actions/cache@v4
      with:
        path: ./json/build
        key: ${{ runner.os }}-json-${{ hashFiles('**/json/CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-json

    # nlohmann::jsonのビルドとインストール
    - name: Build and Install nlohmann::json
      run: |
        git clone https://github.com/nlohmann/json.git
        cd json
        sudo cmake -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_TESTING=OFF
        sudo cmake --build build --target install -j8
        cd ..

    # Skiaのキャッシュ
    - name: Cache Skia
      uses: actions/cache@v4
      with:
        path: /root/skia/out/Static
        key: ${{ runner.os }}-skia-${{ hashFiles('**/skia/VERSION') }}
        restore-keys: |
          ${{ runner.os }}-skia

    # Skiaのビルドとインストール
    - name: Build and Install Skia
      run: |
        git clone 'https://chromium.googlesource.com/chromium/tools/depot_tools.git'
        export PATH="${PWD}/depot_tools:${PATH}"
        git clone https://skia.googlesource.com/skia.git
        cd skia
        sudo python3 tools/git-sync-deps
        sudo python3 bin/fetch-ninja
        # sudo tools/install_dependencies.sh
        if [ ! -d "out/Static" ]; then
          sudo mkdir -p out/Static
        fi
        sudo bin/gn gen out/Static --args='is_official_build=true'
        sudo ninja -C out/Static skia

    # CMakeの構成
    - name: Configure CMake
      run: sudo cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    # ビルド
    - name: Build
      run: sudo cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -j8 --target 349Bot

    # アーティファクトのアップロード
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: build-artifact
        path: ${{github.workspace}}/build/349Bot
