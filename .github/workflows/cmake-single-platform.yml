name: CMake on a single platform

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # ソースコードのチェックアウト
    - uses: actions/checkout@v4

    # キャッシュを使ったaptパッケージのインストール
    - name: Cache apt packages
      uses: actions/cache@v4
      with:
        path: /var/cache/apt
        key: ${{ runner.os }}-apt-${{ hashFiles('apt-dependencies.txt') }}
        restore-keys: |
          ${{ runner.os }}-apt-

    - name: Install dependencies
      run: |
        echo "build-essential cmake git libssl-dev zlib1g-dev libopus-dev python3 python3-pip" > apt-dependencies.txt
        sudo apt-get update
        sudo apt-get install -y $(cat apt-dependencies.txt)
        python3 -m pip install -U pip
        python3 -m pip install gn ninja

    # キャッシュを使ったSkiaのビルド
    - name: Cache Skia build
      uses: actions/cache@v4
      with:
        path: ./skia/out/Release
        key: skia-${{ hashFiles('skia/DEPS') }}
        restore-keys: |
          skia-

    - name: Install Skia
      run: |
        git clone https://skia.googlesource.com/skia.git
        cd skia
        python3 tools/git-sync-deps
        if [ ! -d "out/Release" ]; then
          mkdir -p out/Release
        fi
        gn gen out/Release --args='is_official_build=true skia_enable_gpu=true'
        ninja -C out/Release skia
        cd ..

    # CMakeの構成
    - name: Configure CMake
      run: sudo cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    # 並列ビルドとターゲットの最小化
    - name: Build
      run: sudo cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -j8 --target 349Bot

    # アーティファクトのアップロード
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: build-artifact
        path: ${{github.workspace}}/build/349Bot
